// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2023 20:03:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          d2b_3bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module d2b_3bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] b;
// wires                                               
wire out0;
wire out1;
wire out2;
wire out3;
wire out4;
wire out5;
wire out6;
wire out7;

// assign statements (if any)                          
d2b_3bit i1 (
// port map - connection between master ports and signals/registers   
	.b(b),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.out7(out7)
);
initial 
begin 
#1000000 $finish;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #120000 1'b0;
	b[3] = #30000 1'b1;
	b[3] = #50000 1'b0;
	b[3] = #160000 1'b1;
	b[3] = #70000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #190000 1'b1;
	b[2] = #180000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #100000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #30000 1'b0;
	b[1] = #70000 1'b1;
	b[1] = #30000 1'b0;
	b[1] = #10000 1'b1;
	b[1] = #60000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #60000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #50000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #30000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #60000 1'b0;
end 
endmodule

