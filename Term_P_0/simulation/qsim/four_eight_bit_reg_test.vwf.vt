// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2023 18:44:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          four_eight_bit_reg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module four_eight_bit_reg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ce;
reg clk;
reg [31:0] numIn;
reg rst;
// wires                                               
wire [31:0] numOut;

// assign statements (if any)                          
four_eight_bit_reg i1 (
// port map - connection between master ports and signals/registers   
	.ce(ce),
	.clk(clk),
	.numIn(numIn),
	.numOut(numOut),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// ce
initial
begin
	ce = 1'b0;
	ce = #50000 1'b1;
	ce = #40000 1'b0;
	ce = #80000 1'b1;
	ce = #40000 1'b0;
end 
// numIn[ 31 ]
initial
begin
	numIn[31] = 1'b0;
	numIn[31] = #50000 1'b1;
	numIn[31] = #40000 1'b0;
	numIn[31] = #80000 1'b1;
	numIn[31] = #40000 1'b0;
end 
// numIn[ 30 ]
initial
begin
	numIn[30] = 1'b0;
	numIn[30] = #50000 1'b1;
	numIn[30] = #40000 1'b0;
	numIn[30] = #80000 1'b1;
	numIn[30] = #40000 1'b0;
end 
// numIn[ 29 ]
initial
begin
	numIn[29] = 1'b0;
	numIn[29] = #50000 1'b1;
	numIn[29] = #40000 1'b0;
	numIn[29] = #80000 1'b1;
	numIn[29] = #40000 1'b0;
end 
// numIn[ 28 ]
initial
begin
	numIn[28] = 1'b0;
	numIn[28] = #50000 1'b1;
	numIn[28] = #40000 1'b0;
end 
// numIn[ 27 ]
initial
begin
	numIn[27] = 1'b0;
	numIn[27] = #50000 1'b1;
	numIn[27] = #40000 1'b0;
end 
// numIn[ 26 ]
initial
begin
	numIn[26] = 1'b0;
	numIn[26] = #50000 1'b1;
	numIn[26] = #40000 1'b0;
end 
// numIn[ 25 ]
initial
begin
	numIn[25] = 1'b0;
	numIn[25] = #50000 1'b1;
	numIn[25] = #40000 1'b0;
end 
// numIn[ 24 ]
initial
begin
	numIn[24] = 1'b0;
	numIn[24] = #50000 1'b1;
	numIn[24] = #40000 1'b0;
end 
// numIn[ 23 ]
initial
begin
	numIn[23] = 1'b0;
	numIn[23] = #50000 1'b1;
	numIn[23] = #40000 1'b0;
end 
// numIn[ 22 ]
initial
begin
	numIn[22] = 1'b0;
	numIn[22] = #50000 1'b1;
	numIn[22] = #40000 1'b0;
end 
// numIn[ 21 ]
initial
begin
	numIn[21] = 1'b0;
	numIn[21] = #50000 1'b1;
	numIn[21] = #40000 1'b0;
end 
// numIn[ 20 ]
initial
begin
	numIn[20] = 1'b0;
	numIn[20] = #50000 1'b1;
	numIn[20] = #40000 1'b0;
end 
// numIn[ 19 ]
initial
begin
	numIn[19] = 1'b0;
	numIn[19] = #50000 1'b1;
	numIn[19] = #40000 1'b0;
end 
// numIn[ 18 ]
initial
begin
	numIn[18] = 1'b0;
	numIn[18] = #50000 1'b1;
	numIn[18] = #40000 1'b0;
	numIn[18] = #80000 1'b1;
	numIn[18] = #40000 1'b0;
end 
// numIn[ 17 ]
initial
begin
	numIn[17] = 1'b0;
	numIn[17] = #50000 1'b1;
	numIn[17] = #40000 1'b0;
	numIn[17] = #80000 1'b1;
	numIn[17] = #40000 1'b0;
end 
// numIn[ 16 ]
initial
begin
	numIn[16] = 1'b0;
	numIn[16] = #50000 1'b1;
	numIn[16] = #40000 1'b0;
	numIn[16] = #80000 1'b1;
	numIn[16] = #40000 1'b0;
end 
// numIn[ 15 ]
initial
begin
	numIn[15] = 1'b0;
	numIn[15] = #50000 1'b1;
	numIn[15] = #40000 1'b0;
end 
// numIn[ 14 ]
initial
begin
	numIn[14] = 1'b0;
	numIn[14] = #50000 1'b1;
	numIn[14] = #40000 1'b0;
end 
// numIn[ 13 ]
initial
begin
	numIn[13] = 1'b0;
	numIn[13] = #50000 1'b1;
	numIn[13] = #40000 1'b0;
end 
// numIn[ 12 ]
initial
begin
	numIn[12] = 1'b0;
	numIn[12] = #50000 1'b1;
	numIn[12] = #40000 1'b0;
end 
// numIn[ 11 ]
initial
begin
	numIn[11] = 1'b0;
	numIn[11] = #50000 1'b1;
	numIn[11] = #40000 1'b0;
end 
// numIn[ 10 ]
initial
begin
	numIn[10] = 1'b0;
	numIn[10] = #50000 1'b1;
	numIn[10] = #40000 1'b0;
end 
// numIn[ 9 ]
initial
begin
	numIn[9] = 1'b0;
	numIn[9] = #50000 1'b1;
	numIn[9] = #40000 1'b0;
end 
// numIn[ 8 ]
initial
begin
	numIn[8] = 1'b0;
	numIn[8] = #50000 1'b1;
	numIn[8] = #40000 1'b0;
	numIn[8] = #80000 1'b1;
	numIn[8] = #40000 1'b0;
end 
// numIn[ 7 ]
initial
begin
	numIn[7] = 1'b0;
	numIn[7] = #50000 1'b1;
	numIn[7] = #40000 1'b0;
	numIn[7] = #80000 1'b1;
	numIn[7] = #40000 1'b0;
end 
// numIn[ 6 ]
initial
begin
	numIn[6] = 1'b0;
	numIn[6] = #50000 1'b1;
	numIn[6] = #40000 1'b0;
	numIn[6] = #80000 1'b1;
	numIn[6] = #40000 1'b0;
end 
// numIn[ 5 ]
initial
begin
	numIn[5] = 1'b0;
	numIn[5] = #50000 1'b1;
	numIn[5] = #40000 1'b0;
	numIn[5] = #80000 1'b1;
	numIn[5] = #40000 1'b0;
end 
// numIn[ 4 ]
initial
begin
	numIn[4] = 1'b0;
	numIn[4] = #50000 1'b1;
	numIn[4] = #40000 1'b0;
	numIn[4] = #80000 1'b1;
	numIn[4] = #40000 1'b0;
end 
// numIn[ 3 ]
initial
begin
	numIn[3] = 1'b0;
	numIn[3] = #50000 1'b1;
	numIn[3] = #40000 1'b0;
	numIn[3] = #80000 1'b1;
	numIn[3] = #40000 1'b0;
end 
// numIn[ 2 ]
initial
begin
	numIn[2] = 1'b0;
	numIn[2] = #50000 1'b1;
	numIn[2] = #40000 1'b0;
	numIn[2] = #80000 1'b1;
	numIn[2] = #40000 1'b0;
end 
// numIn[ 1 ]
initial
begin
	numIn[1] = 1'b0;
	numIn[1] = #50000 1'b1;
	numIn[1] = #40000 1'b0;
	numIn[1] = #80000 1'b1;
	numIn[1] = #40000 1'b0;
end 
// numIn[ 0 ]
initial
begin
	numIn[0] = 1'b0;
	numIn[0] = #50000 1'b1;
	numIn[0] = #40000 1'b0;
	numIn[0] = #80000 1'b1;
	numIn[0] = #40000 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
endmodule

