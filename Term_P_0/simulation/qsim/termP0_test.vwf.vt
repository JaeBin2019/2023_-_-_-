// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2023 18:58:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          termP0
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module termP0_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg numInit;
reg numpad0;
reg numpad1;
reg numpad2;
reg numpad3;
reg numpad4;
reg numpad5;
reg numpad6;
reg numpad7;
reg numpad8;
reg numpad9;
reg rst;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;
wire [31:0] numOut;
wire Piezo;

// assign statements (if any)                          
termP0 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk(clk),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.numInit(numInit),
	.numOut(numOut),
	.numpad0(numpad0),
	.numpad1(numpad1),
	.numpad2(numpad2),
	.numpad3(numpad3),
	.numpad4(numpad4),
	.numpad5(numpad5),
	.numpad6(numpad6),
	.numpad7(numpad7),
	.numpad8(numpad8),
	.numpad9(numpad9),
	.Piezo(Piezo),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// numInit
initial
begin
	numInit = 1'b0;
	numInit = #60000 1'b1;
	numInit = #30000 1'b0;
	numInit = #120000 1'b1;
	numInit = #30000 1'b0;
	numInit = #170000 1'b1;
	numInit = #30000 1'b0;
end 

// numpad0
initial
begin
	numpad0 = 1'b0;
end 

// numpad1
initial
begin
	numpad1 = 1'b0;
end 

// numpad2
initial
begin
	numpad2 = 1'b0;
end 

// numpad3
initial
begin
	numpad3 = 1'b0;
end 

// numpad4
initial
begin
	numpad4 = 1'b0;
end 

// numpad5
initial
begin
	numpad5 = 1'b0;
end 

// numpad6
initial
begin
	numpad6 = 1'b0;
end 

// numpad7
initial
begin
	numpad7 = 1'b0;
end 

// numpad8
initial
begin
	numpad8 = 1'b0;
end 

// numpad9
initial
begin
	numpad9 = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

